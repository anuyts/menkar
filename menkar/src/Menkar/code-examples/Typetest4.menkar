module Test where {
    val Nat' : _ = Nat
    val one : Nat = suc 0
    val _+ {a b : Nat} : Nat = indNat (_ > {_ : Nat} -> Nat) (b > b) (a' > a'+ > b > suc (a'+ b)) a b
    val _-> {A B : UniHS} : UniHS = {_ : A} -> B
    val _>< {A B : UniHS} : UniHS = {_ : A} >< B
    val etatest : {_ : Nat} -> Box (Unit) = ?goal
}

/*
A could be an implicit function outputting stuff of universe type. Hence, its type is not resolved.
Then the type of x is a smart elimination that cannot be computed, and is represented as a meta.
Then the _ is not resolved either, because metas are only resolved against WHNFs.
*/
