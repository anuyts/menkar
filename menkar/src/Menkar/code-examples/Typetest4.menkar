module Test where {
    //val Nat' : _ = Nat .{0}
    //val one : Nat .{0} = suc 0
    //val _+ {a b : Nat .{0}} : Nat .{0} = indNat (_ > {_ : Nat .{0}} -> Nat .{0}) (b > b) (a' > a'+ > b > suc (a'+ b)) a b
    val _-> {~ | l : Nat .{0}} {A B : UniHS l} : UniHS l = {_ : A} -> B
}

/*
A could be an implicit function outputting stuff of universe type. Hence, its type is not resolved.
Then the type of x is a smart elimination that cannot be computed, and is represented as a meta.
Then the _ is not resolved either, because metas are only resolved against WHNFs.
*/
