/* */
module [depth dsuc d] InitialOfFunctor
	{pseudo | d : Depth}
	{F {~ irr | l : Nat} : Uni d l .{a = b} -> Uni d l}
	{str |
		F'
		{~ irr | lA lB : Nat}
		{~ par | A : Uni d ?george}
		{~ par | B : Uni d lB}
		{f : A -> B}
		: F l A -> F l B
	}
where {

	val IsAlg {~ irr | l : Nat} {A : Uni d l} : Uni d l = F A -> A,

	val IsMph {~ irr | lA lB : Nat}
		{~| A : Uni d lA}
		{~| B : Uni d lB}
		{str | mkA : IsAlg A}
		{str | mkB : IsAlg B}
		{str | f : A -> B}
		: Uni d (max lA lB)
		= f after mkA == mkB after F' f,

	val Mu {irr | l : Nat} : Uni d (suc l) = {par X : Set d l} {mkX : IsAlg X} -> X,

	val [str] fold {~ irr | l : Nat}
		{par | X : Uni d l}
		{mkX : IsAlg X}
		: Mu l -> X
		= m > m X mkX

	val [str] mkMu {~ irr | l : Nat} : IsAlg (Mu l) = fm > X > mkX > mkX (F' (fold mkX) fm),

	val [str] mfold {~ irr | l : Nat} {par | X : Uni d l}
	: IsMph mkMu mkX (fold mkX)
	= refl

	val [depth 1] Eq {~ irr | l : Nat} {X : Uni 0 l} : Uni 0 l = X -> X -> Bool,

	val _== {~ irr | l : Nat} {~ par | X : Uni 0 l} {[resolves eq X] | eq' : Eq X} {str | x y : X} : Bool = eq _ x y
	
	val [Depth 0][resolves eq (Bool -> X)] eqBool-> {~ irr | l' : Nat} {~ par | X : Uni 0 l'} {[resolves eq X] | _ : Eq X}
		: Eq (Bool -> X)
		= f > g > (f true == g true) && (f false == g false)

}
