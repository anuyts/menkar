module Test where {
    val (->) {A B : UniHS} : UniHS = {_ : A} -> B
    val (><) {A B : UniHS} : UniHS = {_ : A} >< B
    val cong {~| A B : UniHS} {f : A -> B} {~| a1 a2 : A} {e : a1 == a2}
        : f a1 == f a2
        = ind== (x2 > _ > f a1 == f x2) (refl ...) e
/*
    val (+) {a b : Nat} : Nat = indNat (_ > {_ : Nat} -> Nat) (b > b) (a' > a'+ > b > suc (a'+ b)) a b
    val lunit+ {~ | n : Nat}
        : (0 + n) == n
        = refl ...
    val runit+ {~ | n : Nat}
        : (n + 0) == n
        = indNat (x > (x + 0) == x) (refl ...) (x > e > cong suc e) n
    val assoc {~ | m n o : Nat}
        : (m + (n + o)) == ((m + n) + o)
        = indNat
            (x > (x + (n + o)) == ((x + n) + o))
            (refl ...)
            (x > e > cong suc e)
            m
*/
}
