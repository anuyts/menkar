[depth $ d + 1] | InitialOfFunctor
//	{[d :: Depth]}
	{F {~ irr | l : Nat} : Uni [d] l -> Uni [d] l}
	{str |
		F'
		{~ irr | lA lB : Nat}
		{~ par | A : Uni [d] lA}
		{~ par | B : Uni [d] lB}
		{f : A -> B}
		: F l A -> F l B
	}
/*	{str | /*preferrably use extension types instead of rewrite rules*/
		-:
		{irr | lA : Nat}
		{par | A : Uni [d] lA}
		-> F' ({a : A} . a) := ({fa : F A} . fa)
	}
	{str |
		-:
		{irr | lA lB lC : Nat}
		{par | A : Uni [d] lA}
		{par | B : Uni [d] lB}
		{par | C : Uni [d] lC}
		{f : A -> B}
		{g : B -> C}
		{fa : F A}
		-> F' g (F' f fa) := F' (a . g (f a)) fa
	}	*/
= module {

/*	IsAlg {~ irr | l : Nat} {A : Uni [d] l} : Uni [d] l = F A -> A,

	IsMph {~ irr | lA lB : Nat}
		{~| A : Uni [d] lA}
		{~| B : Uni [d] lB}
		{str | mkA : IsAlg A}
		{str | mkB : IsAlg B}
		{str | f : A -> B}
		: Uni [d] (max lA lB)
		= f after mkA == mkB after F' f,

	Mu {irr | l : Nat} : Set [d] (suc l) = {@par X : Set [d] l} {mkX : IsAlg X} -> X,

	str | fold {~ irr | l : Nat}
		{par | X : Uni [d] l}
		{mkX : IsAlg X}
		: Mu l -> X
		= m . m X mkX,

	str | mkMu {~ irr | l : Nat} : IsAlg (Mu l) = fm . X . mkX . mkX (F' (fold mkX) fm),

	str | mfold {~ irr | l : Nat} {par | X : Uni [d] l}
	: IsMph mkMu mkX (fold mkX)
	= refl,

	Mu' {irr | l : Nat} : Set [d] (suc l) = data {
		mkMu' : F Mu' -> Mu'
	},

	str | fold' {~ irr | l : Nat}
		{par | X : Uni [d] l}
		{mkX : IsAlg X}
		: Mu' l -> X
		= m . case m {
			/*Of course this is nonsense: F is not recognized as covariant*/
			mkMu' (fm >> fx) >> mkX fx
		}

	str | mfold' {~ irr | l : Nat} {par | X : Uni [d] l}
	: IsMph mkMu' mkX (fold' mkX)
	= refl,	*/
}
