/*	New:
	*entries start with a keyword
		+thus, they need not end in a comma
		-this is nearly always val
		-keywords must be capitalized so as not to look like annotations
*/

MODULE (depth dsuc d) | InitialOfFunctor
	{pseudo | d : Depth}
	{F {~ irr | l : Nat} : Uni d l -> Uni d l}
	{str |
		F'
		{~ irr | lA lB : Nat}
		{~ par | A : Uni d lA}
		{~ par | B : Uni d lB}
		{f : A -> B}
		: F l A -> F l B
	}
	{str | /*preferrably use extension types instead of rewrite rules*/
		-:
		{irr | lA : Nat}
		{par | A : Uni d lA}
		-> F' ({a : A} . a) := ({fa : F A} . fa)
	}
	{str |
		-:
		{irr | lA lB lC : Nat}
		{par | A : Uni d lA}
		{par | B : Uni d lB}
		{par | C : Uni d lC}
		{f : A -> B}
		{g : B -> C}
		{fa : F A}
		-> F' g (F' f fa) := F' (a . g (f a)) fa
	}
WHERE {

	VAL IsAlg {~ irr | l : Nat} {A : Uni d l} : Uni d l = F A -> A

	VAL IsMph {~ irr | lA lB : Nat}
		{~| A : Uni d lA}
		{~| B : Uni d lB}
		{str | mkA : IsAlg A}
		{str | mkB : IsAlg B}
		{str | f : A -> B}
		: Uni d (max lA lB)
		= f after mkA == mkB after F' f

	VAL Mu {irr | l : Nat} : Uni d (suc l) = {@par X : Set [d] l} {mkX : IsAlg X} -> X

	VAL str | fold {~ irr | l : Nat}
		{par | X : Uni d l}
		{mkX : IsAlg X}
		: Mu l -> X
		= m . m X mkX

	VAL str | mkMu {~ irr | l : Nat} : IsAlg (Mu l) = fm . X . mkX . mkX (F' (fold mkX) fm)

	VAL str | mfold {~ irr | l : Nat} {par | X : Uni [d] l}
	: IsMph mkMu mkX (fold mkX)
	= refl

	VAL Mu' {irr | l : Nat} : Uni d (suc l) = data {
		mkMu' : F Mu' -> Mu'
	}

	VAL str | fold' {~ irr | l : Nat}
		{par | X : Uni d l}
		{mkX : IsAlg X}
		: Mu' l -> X
		= m . case m {
			/*Of course this is nonsense: F is not recognized as covariant*/
			mkMu' (fm >> fx) >> mkX fx
		}

	VAL str | mfold' {~ irr | l : Nat} {par | X : Uni d l}
	: IsMph mkMu' mkX (fold' mkX)
	= refl
}

//-----------------------------------------

VAL _ {~ pseudo | d : Depth} {~ irr | l : Nat} {~ par | X : Uni d l} {~| x : X} : X = x

//maybe pseudos cannot be implicit except for primitives

//-----------------------------------------

VAL (depth 1) (resolution eq) |
Eq {~ irr | l : Nat} {X : Uni 0 l} : Uni 0 l = X -> X -> Bool

// eq {~ irr | l : Nat} {par | X : Uni 0 l} {(~ eq) | eq' : Eq X} : Eq X
// i.e. eq X is the instance for X.

VAL (syntax (x == y)) |
_== {~ irr | l : Nat} {~ par | X : Uni 0 l} {(~ eq) | eq' : Eq X} {str | x y : X} : Bool = eq _ x y

VAL (depth 0) (resolves eq (Bool -> X)) |
eqBool-> {~irr | l' : Nat} {~ par | X : Uni 0 l'} {(~ eq) | _ : Eq X} : Eq (Bool -> X)
	= \f \g (f true == g true) && (f false == g false)

//-----------------------------------------

IX (A -> {-: P}.(T , f))
FX (A <- {-: P}.(T , f))

//-----------------------------------------

VAL Stream {irr | l : Nat} {A : Uni d l} : Uni d l
	= {par | X : Uni d l} >< (X -> A) >< (X -> X) >< X
VAL str | count {n : Nat} : Uni 0 0
	= (Nat, x . x, suc, n)


---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------



/*	New:
	*entries start with a keyword
		+thus, they need not end in a comma
		-this is nearly always val
	*annotations are between [...] instead of before a |
	*first word of annotation is always applied to all the rest
		*hence new annotations should be defined using 'annotation' keyword
*/

module [depth dsuc d] InitialOfFunctor
	{[pseudo] d : Depth}
	{F {~ [irr] l : Nat} : Uni d l -> Uni d l}
	{[str]
		F'
		{~ [irr] lA lB : Nat}
		{~ [par] A : Uni d lA}
		{~ [par] B : Uni d lB}
		{f : A -> B}
		: F l A -> F l B
	}
	{[str] /*preferrably use extension types instead of rewrite rules*/
		-:
		{[irr] lA : Nat}
		{[par] A : Uni d lA}
		-> F' ({a : A} . a) := ({fa : F A} . fa)
	}
	{[str]
		-:
		{[irr] lA lB lC : Nat}
		{[par] A : Uni d lA}
		{[par] B : Uni d lB}
		{[par] C : Uni d lC}
		{f : A -> B}
		{g : B -> C}
		{fa : F A}
		-> F' g (F' f fa) := F' (a . g (f a)) fa
	}
where {

	val IsAlg {~ [irr] l : Nat} {A : Uni d l} : Uni d l = F A -> A

	val IsMph {~ [irr] lA lB : Nat}
		{~ A : Uni d lA}
		{~ B : Uni d lB}
		{[str] mkA : IsAlg A}
		{[str] mkB : IsAlg B}
		{[str] f : A -> B}
		: Uni d (max lA lB)
		= f after mkA == mkB after F' f

	val Mu {[irr] l : Nat} : Uni d (suc l) = {[par] X : Set d l} {mkX : IsAlg X} -> X

	val [str] fold {~ [irr] l : Nat}
		{[par] X : Uni d l}
		{mkX : IsAlg X}
		: Mu l -> X
		= m . m X mkX

	val [str] mkMu {~ [irr] l : Nat} : IsAlg (Mu l) = fm . X . mkX . mkX (F' (fold mkX) fm)

	val [str] mfold {~ [irr] l : Nat} {[par] X : Uni d l}
	: IsMph mkMu mkX (fold mkX)
	= refl

	data Mu' {[irr] l : Nat} : Uni d (suc l) where {
		mkMu' : F Mu' -> Mu'
	}

	val [str] fold' {~ [irr] l : Nat}
		{[par] X : Uni d l}
		{mkX : IsAlg X}
		: Mu' l -> X
		= m . case m {
			/*Of course this is nonsense: F is not recognized as covariant*/
			mkMu' (fm >> fx) >> mkX fx
		}

	val [str] mfold' {~ [irr] l : Nat} {par | X : Uni d l}
	: IsMph mkMu' mkX (fold' mkX)
	= refl
}

//-----------------------------------------

val _ {~ [pseudo] d : Depth} {~ [irr] l : Nat} {~ [par] X : Uni d l} {~ x : X} : X = x

//maybe pseudos cannot be implicit, except for primitives

//-----------------------------------------

val Eq {~ [irr] l : Nat} {X : Uni 0 l} : Uni 0 l = X -> X -> Bool

resolution [str] eq {~ [irr] l : Nat} {[par] X : Uni 0 l} : Eq X

// eq {~ [irr] l : Nat} {[par] X : Uni 0 l} {~ [resolves eq X] eqX : Eq X} : Eq X
// i.e. eq X is the instance for X.

val [syntax x == y]
_== {~ [irr] l : Nat} {~ [par] X : Uni 0 l} {~ eq' : Eq X} {[str] x y : X} : Bool = eq _ x y

val [depth 0] [resolves eq (Bool -> X)]
eqBool-> {~ [irr] l' : Nat} {~ [par] X : Uni 0 l'} {~ [resolves eq X] eqX : Eq X} : Eq (Bool -> X)
	= f . g . (f true == g true) && (f false == g false)

//-----------------------------------------

IX (A -> {-: P}.(T , f))
FX (A <- {-: P}.(T , f))

//-----------------------------------------

val Stream {[irr] l : Nat} {A : Uni d l} : Uni d l
	= {[par] X : Uni d l} >< (X -> A) >< (X -> X) >< X
val [str] count {n : Nat} : Uni 0 0
	= (Nat, x . x, suc, n)


---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------


/*	New:
	*entries start with a keyword
		+thus, they need not end in a comma
		-this is nearly always val
	*annotations OF ENTRIES are between [...] instead of before a |
	*first word of annotation is always applied to all the rest
		*hence new annotations should be defined using 'annotation' keyword
*/

module [depth dsuc d] InitialOfFunctor
	{pseudo | d : Depth}
	{F {~ irr | l : Nat} : Uni d l -> Uni d l}
	{str |
		F'
		{~ irr | lA lB : Nat}
		{~ par | A : Uni d lA}
		{~ par | B : Uni d lB}
		{f : A -> B}
		: F l A -> F l B
	}
	{str | /*preferrably use extension types instead of rewrite rules*/
		-:
		{irr | lA : Nat}
		{par | A : Uni d lA}
		-> F' ({a : A} . a) := ({fa : F A} . fa)
	}
	{str |
		-:
		{irr | lA lB lC : Nat}
		{par | A : Uni d lA}
		{par | B : Uni d lB}
		{par | C : Uni d lC}
		{f : A -> B}
		{g : B -> C}
		{fa : F A}
		-> F' g (F' f fa) := F' (a . g (f a)) fa
	}
where {

	val IsAlg {~ irr | l : Nat} {A : Uni d l} : Uni d l = F A -> A

	val IsMph {~ irr | lA lB : Nat}
		{~| A : Uni d lA}
		{~| B : Uni d lB}
		{str | mkA : IsAlg A}
		{str | mkB : IsAlg B}
		{str | f : A -> B}
		: Uni d (max lA lB)
		= f after mkA == mkB after F' f

	val Mu {irr | l : Nat} : Uni d (suc l) = {@par X : Set [d] l} {mkX : IsAlg X} -> X

	val [str] fold {~ irr | l : Nat}
		{par | X : Uni d l}
		{mkX : IsAlg X}
		: Mu l -> X
		= m . m X mkX

	val [str] mkMu {~ irr | l : Nat} : IsAlg (Mu l) = fm . X . mkX . mkX (F' (fold mkX) fm)

	val [str] mfold {~ irr | l : Nat} {par | X : Uni [d] l}
	: IsMph mkMu mkX (fold mkX)
	= refl

	val Mu' {irr | l : Nat} : Uni d (suc l) = data {
		mkMu' : F Mu' -> Mu'
	}

	val [str] fold' {~ irr | l : Nat}
		{par | X : Uni d l}
		{mkX : IsAlg X}
		: Mu' l -> X
		= m . case m {
			/*Of course this is nonsense: F is not recognized as covariant*/
			mkMu' (fm >> fx) >> mkX fx
		}

	val [str] mfold' {~ irr | l : Nat} {par | X : Uni d l}
	: IsMph mkMu' mkX (fold' mkX)
	= refl
}

//-----------------------------------------

val _ {~ pseudo | d : Depth} {~ irr | l : Nat} {~ par | X : Uni d l} {~| x : X} : X = x

//maybe pseudos cannot be implicit except for primitives

//-----------------------------------------

val [depth 1] Eq {~ irr | l : Nat} {X : Uni 0 l} : Uni 0 l = X -> X -> Bool

resolution [str] eq {~ irr | l : Nat} {par | X : Uni 0 l} : Eq X

// eq {~ irr | l : Nat} {par | X : Uni 0 l} {(~ eq) | eq' : Eq X} : Eq X
// i.e. eq X is the instance for X.

val [syntax x == y]
_== {~ irr | l : Nat} {~ par | X : Uni 0 l} {(~ eq) | eq' : Eq X} {str | x y : X} : Bool = eq _ x y

val [depth 0] [resolves eq (Bool -> X)]
eqBool-> {~ irr | l' : Nat} {~ par | X : Uni 0 l'} {(~ eq) | _ : Eq X} : Eq (Bool -> X)
	= \f \g (f true == g true) && (f false == g false)

//-----------------------------------------

IX (A -> {-: P}.(T , f))
FX (A <- {-: P}.(T , f))

//-----------------------------------------

val Stream {irr | l : Nat} {A : Uni d l} : Uni d l
	= {par | X : Uni d l} >< (X -> A) >< (X -> X) >< X
val [str] count {n : Nat} : Uni 0 0
	= (Nat, x . x, suc, n)
