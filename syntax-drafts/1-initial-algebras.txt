@[depth $ d + 1]
InitialOfFunctor
	[d :: Depth]
	{F : {@irr l : Nat} {_ : Uni [d] l} -> Uni [d] l}
	{@str F' :
		{@irr lA lB : Nat}
		{@par A : Uni [d] lA}
		{@par B : Uni [d] lB}
		{f : A -> B} -> F l A -> F l B
	}
	...
	= module {
		...
	}

-----------------------------------------

@[depth $ d + 1]
InitialOfFunctor {
		[d :: Depth];
		F {
				@im @irr l : Nat;
				_ : Uni [d] l
			} : Uni [d] l;
		@str F' {
				@irr lA lB : Nat;
				@par A : Uni [d] lA;
				@par B : Uni [d] lB;
				f : A -> B;
			} : F A -> F B;
	}

-----------------------------------------

{@[depth $ d + 1]
	InitialOfFunctor
	[d :: Depth]
	{F {@irr @im l : Nat} : Uni [d] l -> Uni [d] l}
	{@str
		F'
		{@im @irr lA lB : Nat}
		{@im @par A : Uni [d] lA}
		{@im @par B : Uni [d] lB}
		{f : A -> B}
		: F l A -> F l B
	}
	{@str
		-:
		{@irr lA : Nat}
		{@par A : Uni [d] lA}
		-> F' ({a : A} . a) := ({fa : F A} . fa)
	}
	{@str
		-:
		{@irr lA lB lC : Nat}
		{@par A : Uni [d] lA}
		{@par B : Uni [d] lB}
		{@par C : Uni [d] lC}
		{f : A -> B}
		{g : B -> C}
		{fa : F A}
		-> F' g (F' f fa) := F' (a . g (f a)) fa
	}
	: module

	
}
